#include <iostream>
#include <unordered_map>
using namespace std;

struct Node
{
    int data;
    Node* next;
    Node* random;
 
    
    Node(int data)
    {
        this->data = data;
        this->next = nullptr;
    }
};
 

void traverse(Node* head)
{
    if (head == nullptr) {
        cout << "null" << '\n';
        return;
    }
 
    
    if (head->random) {
        cout << head->data << "(" << head->random->data << ") —> ";
    } else {
        cout << head->data << "(" << "X" << ") —> ";
    }
 
    traverse(head->next);
}
void updateRandomPointers(Node* head, unordered_map<Node*, Node*> &map)
{
 
    if (map[head] == nullptr) {
        return;
    }
 
    
    map[head]->random = map[head->random];
 
    updateRandomPointers(head->next, map);
}
 

Node* cloneLinkedList(Node* head, unordered_map<Node*, Node*> &map)
{
   
    if (head == nullptr) {
        return nullptr;
    }
 
  
    map[head] = new Node(head->data);
 
    
    map[head]->next = cloneLinkedList(head->next, map);
 
    return map[head];
}
 

Node* cloneLinkedList(Node* head)
{
   
    unordered_map<Node*, Node*> map;
 
   
    cloneLinkedList(head, map);
 
    
    updateRandomPointers(head, map);
 
    return map[head];
}
 
int main()
{
    Node *head = new Node(1);
    head->next = new Node(2);
    head->next->next = new Node(3);
    head->next->next->next = new Node(4);
    head->next->next->next->next = new Node(5);
 
    head->random = head->next->next->next;
    head->next->next->random = head->next;
 
    cout << "Original Linked List:\n";
    traverse(head);
 
    Node* clone = cloneLinkedList(head);
 
    cout << "\nCloned Linked List:\n";
    traverse(clone);
 
    return 0;
}
